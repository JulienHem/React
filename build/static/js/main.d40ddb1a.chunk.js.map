{"version":3,"sources":["helpers/format-date.tsx","helpers/format-type.tsx","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","src","picture","alt","name","created","types","map","key","POKEMONS","hp","cp","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","find","method","body","JSON","stringify","headers","index","findIndex","filter","term","includes","Object","keys","length","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","PokemonList","useEffect","getPokemons","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","handleIntputChange","fieldName","fieldValue","newField","isAddForm","isTypesValid","handleSubmit","preventDefault","newForm","startsWith","endsWith","test","validateForm","updatePokemon","addPokemon","onSubmit","deletePokemon","htmlFor","marginBottom","checked","disabled","concat","currentType","selectType","PokemonEdit","Pokemon","PokemonAdd","getTime","AutenticationService","username","password","isAuthenticated","setTimeout","Login","message","setMessage","AuthenticationService","login","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","PokemonDetail","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d40ddb1a.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\r\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`\r\n}\r\n\r\nexport default formatDate;","const formatType = (type: string): string => {\r\n    let color: string;\r\n\r\n    switch (type) {\r\n        case 'Feu':\r\n            color = 'red lighten-1';\r\n            break;\r\n        case 'Eau':\r\n            color = 'blue lighten-1';\r\n            break;\r\n        case 'Plante':\r\n            color = 'green lighten-1';\r\n            break;\r\n        case 'Insecte':\r\n            color = 'brown lighten-1';\r\n            break;\r\n        case 'Normal':\r\n            color = 'grey lighten-3';\r\n            break;\r\n        case 'Vol':\r\n            color = 'blue lighten-3';\r\n            break;\r\n        case 'Poison':\r\n            color = 'deep-purple accent-1';\r\n            break;\r\n        case 'Fée':\r\n            color = 'pink lighten-4';\r\n            break;\r\n        case 'Psy':\r\n            color = 'deep-purple darken-2';\r\n            break;\r\n        case 'Electrik':\r\n            color = 'lime accent-1';\r\n            break;\r\n        case 'Combat':\r\n            color = 'deep-orange';\r\n            break;\r\n        default:\r\n            color = 'grey';\r\n            break;\r\n    }\r\n\r\n    return `chip ${color}`;\r\n}\r\n\r\nexport default formatType;","import React, {FunctionComponent, useState} from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport './pokemon-card.css';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\ntype Props = {\r\n    pokemon: Pokemon,\r\n    borderColor?: string\r\n};\r\n\r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\r\n\r\n    const [color, setColor] = useState<string>();\r\n    const history = useHistory();\r\n\r\n    const showBorder = () => {\r\n        setColor(borderColor);\r\n    }\r\n\r\n    const hideBorder = () => {\r\n        setColor('#f5f5f5'); // ON REMET LA COULEUR EN GRIS\r\n    }\r\n\r\n    const goToPokemon = (id: number) => {\r\n        history.push(`/pokemons/${id}`);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder}\r\n             onMouseLeave={hideBorder}>\r\n            <div className=\"card horizontal\" style={{borderColor: color}}>\r\n                <div className=\"card-image\">\r\n                    <img src={pokemon.picture} alt={pokemon.name}/>\r\n                </div>\r\n                <div className=\"card-stacked\">\r\n                    <div className=\"card-content\">\r\n                        <p>{pokemon.name}</p>\r\n                        <p><small>{formatDate(pokemon.created)}</small></p>\r\n                        {pokemon.types.map(type => (\r\n                            <span key={type} className={formatType(type)}>{type} </span>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonCard;","import Pokemon from './pokemon';\r\n\r\nexport const POKEMONS: Pokemon[] = [\r\n    {\r\n        id: 1,\r\n        name: \"Bulbizarre\",\r\n        hp: 25,\r\n        cp: 5,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n        types: [\"Plante\", \"Poison\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Salamèche\",\r\n        hp: 28,\r\n        cp: 6,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n        types: [\"Feu\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Carapuce\",\r\n        hp: 21,\r\n        cp: 4,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n        types: [\"Eau\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Aspicot\",\r\n        hp: 16,\r\n        cp: 2,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n        types: [\"Insecte\", \"Poison\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 5,\r\n        name: \"Roucool\",\r\n        hp: 30,\r\n        cp: 7,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n        types: [\"Normal\", \"Vol\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 6,\r\n        name: \"Rattata\",\r\n        hp: 18,\r\n        cp: 6,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n        types: [\"Normal\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 7,\r\n        name: \"Piafabec\",\r\n        hp: 14,\r\n        cp: 5,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n        types: [\"Normal\", \"Vol\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 8,\r\n        name: \"Abo\",\r\n        hp: 16,\r\n        cp: 4,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n        types: [\"Poison\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 9,\r\n        name: \"Pikachu\",\r\n        hp: 21,\r\n        cp: 7,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n        types: [\"Electrik\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 10,\r\n        name: \"Sabelette\",\r\n        hp: 19,\r\n        cp: 3,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n        types: [\"Normal\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 11,\r\n        name: \"Mélofée\",\r\n        hp: 25,\r\n        cp: 5,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n        types: [\"Fée\"],\r\n        created: new Date()\r\n    },\r\n    {\r\n        id: 12,\r\n        name: \"Groupix\",\r\n        hp: 17,\r\n        cp: 8,\r\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n        types: [\"Feu\"],\r\n        created: new Date()\r\n    }\r\n];\r\n\r\nexport default POKEMONS;","import Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n\r\nexport default class PokemonService {\r\n\r\n    static pokemons:Pokemon[] = POKEMONS;\r\n\r\n    static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n\r\n    static getPokemons(): Promise<Pokemon[]> {\r\n        if(this.isDev) {\r\n            return fetch('http://localhost:3001/pokemons')\r\n                .then(response => response.json())\r\n                .catch(error => this.handleError(error));\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            resolve(this.pokemons);\r\n        });\r\n    }\r\n\r\n    static getPokemon(id: number): Promise<Pokemon|null> {\r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons/${id}`)\r\n                .then(response => response.json())\r\n                .then(data => this.isEmpty(data) ? null : data)\r\n                .catch(error => this.handleError(error));\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n        });\r\n    }\r\n\r\n    static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n                method: 'PUT',\r\n                body: JSON.stringify(pokemon),\r\n                headers: { 'Content-Type': 'application/json'}\r\n            })\r\n                .then(response => response.json())\r\n                .catch(error => this.handleError(error));\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            const { id } = pokemon;\r\n            const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n            this.pokemons[index] = pokemon;\r\n            resolve(pokemon);\r\n        });\r\n    }\r\n\r\n    static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n                method: 'DELETE',\r\n                headers: { 'Content-Type': 'application/json'}\r\n            })\r\n                .then(response => response.json())\r\n                .catch(error => this.handleError(error));\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            const { id } = pokemon;\r\n            this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n            resolve({});\r\n        });\r\n    }\r\n\r\n    static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n        pokemon.created = new Date(pokemon.created);\r\n\r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons`, {\r\n                method: 'POST',\r\n                body: JSON.stringify(pokemon),\r\n                headers: { 'Content-Type': 'application/json'}\r\n            })\r\n                .then(response => response.json())\r\n                .catch(error => this.handleError(error));\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            this.pokemons.push(pokemon);\r\n            resolve(pokemon);\r\n        });\r\n    }\r\n\r\n    static searchPokemon(term: string): Promise<Pokemon[]> {\r\n        if(this.isDev) {\r\n            return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n                .then(response => response.json())\r\n                .catch(error => this.handleError(error));\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n            resolve(results);\r\n        });\r\n\r\n    }\r\n\r\n    static isEmpty(data: Object): boolean {\r\n        return Object.keys(data).length === 0;\r\n    }\r\n\r\n    static handleError(error: Error): void {\r\n        console.error(error);\r\n    }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\nconst PokemonSearch: FunctionComponent = () => {\r\n\r\n    const [term, setTerm] = useState<string>('');\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const term = e.target.value;\r\n        setTerm(term);\r\n\r\n        if(term.length <= 1) {\r\n            setPokemons([]);\r\n            return;\r\n        }\r\n\r\n        PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s12 m6 offset-m3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"input-field\">\r\n                            <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} />\r\n                        </div>\r\n                        <div className='collection'>\r\n                            {pokemons.map((pokemon) => (\r\n                                <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\r\n                                    {pokemon.name}\r\n                                </Link>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport PokemonService from \"../services/pokemon-service\";\r\nimport {Link} from \"react-router-dom\";\r\nimport PokemonSearch from \"../components/pokemon-search\";\r\n\r\n\r\nconst PokemonList: FunctionComponent = () => {\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    useEffect(() => {\r\n        PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"center\">Pokédex</h1>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <PokemonSearch />\r\n                    {pokemons.map(pokemon => (\r\n                        <PokemonCard key={pokemon.id} pokemon={pokemon}/>\r\n                    ))}\r\n                </div>\r\n                <Link to={`/pokemon/add`}\r\n                      className=\"btn btn-floating halfway-fab waves-effect waves-light red z-depth-3\"\r\n                style={{position: 'fixed', bottom:'25px', right: '25px'}}>\r\n                <i className=\"material-icons\">add</i>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonList;","import React, { FunctionComponent } from 'react';\r\n\r\nconst Loader: FunctionComponent = () => {\r\n\r\n    return (\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div><div className=\"circle-clipper right\">\r\n                <div className=\"circle\"></div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, {FunctionComponent, useState, useEffect} from 'react';\r\nimport {RouteComponentProps, Link} from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from \"../services/pokemon-service\";\r\nimport Loader from \"../components/loader\";\r\n\r\ntype Params = { id: string };\r\n\r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match}) => {\r\n\r\n    const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n\r\n    useEffect(() => {\r\n        PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n    }, [match.params.id]);\r\n\r\n    return (\r\n        <div>\r\n            {pokemon ? (\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m8 offset-m2\">\r\n                        <h2 className=\"header center\">{pokemon.name}</h2>\r\n                        <div className=\"card hoverable\">\r\n                            <div className=\"card-image\">\r\n                                <img src={pokemon.picture} alt={pokemon.name}\r\n                                     style={{width: '250px', margin: '0 auto'}}/>\r\n                                <Link to={`/pokemons/edit/${pokemon.id}`}\r\n                                      className=\"btn btn-floating halfway-fab waves-effect waves-light\">\r\n                                    <i className=\"material-icons\">edit</i>\r\n                                </Link>\r\n                            </div>\r\n                            <div className=\"card-stacked\">\r\n                                <div className=\"card-content\">\r\n                                    <table className=\"bordered striped\">\r\n                                        <tbody>\r\n                                        <tr>\r\n                                            <td>Nom</td>\r\n                                            <td><strong>{pokemon.name}</strong></td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Points de vie</td>\r\n                                            <td><strong>{pokemon.hp}</strong></td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Dégâts</td>\r\n                                            <td><strong>{pokemon.cp}</strong></td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Types</td>\r\n                                            <td>\r\n                                                {pokemon.types.map(type => (\r\n                                                    <span key={type} className={formatType(type)}>{type}</span>\r\n                                                ))}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Date de création</td>\r\n                                            <td>{formatDate(pokemon.created)}</td>\r\n                                        </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                                <div className=\"card-action\">\r\n                                    <Link to=\"/\">Retour</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <h4 className=\"center\"><Loader /></h4>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PageNotFound: FunctionComponent = () => {\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n            <h1>Hey, cette page n'existe pas !</h1>\r\n            <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n                Retourner à l'accueil\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageNotFound;","import React, {FunctionComponent, useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from \"../services/pokemon-service\";\r\n\r\ntype Props = {\r\n    pokemon: Pokemon\r\n    isEditForm: boolean\r\n};\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n}\r\n\r\ntype Form = {\r\n    picture: Field,\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field,\r\n}\r\n\r\n\r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        picture: { value: pokemon.picture },\r\n        name: { value: pokemon.name, isValid: true },\r\n        hp: { value: pokemon.hp, isValid: true },\r\n        cp: { value: pokemon.cp, isValid: true },\r\n        types: {value: pokemon.types, isValid: true }\r\n    });\r\n\r\n    const history = useHistory();\r\n\r\n    const types: string[] = [\r\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n    ];\r\n\r\n    const hasType = (type: string): boolean => {\r\n        return form.types.value.includes(type);\r\n    }\r\n\r\n    const handleIntputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = {[fieldName]: {value: fieldValue}};\r\n\r\n        setForm({...form, ...newField});\r\n    }\r\n\r\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const checked = e.target.checked;\r\n        let newField: Field;\r\n\r\n        if (checked) {\r\n            // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\r\n            const newTypes: string[] = form.types.value.concat([type]);\r\n            newField = {value: newTypes};\r\n        } else {\r\n            // Si l'utilisateur décoche un type on le retire de la liste des types du pokémon.\r\n            const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n            newField = {value: newTypes};\r\n        }\r\n\r\n        setForm({...form, ...{types: newField}});\r\n    }\r\n\r\n    const isAddForm = () => {\r\n        return !isEditForm;\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator url\r\n        if (isAddForm()) {\r\n            const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n            const end = \".png\";\r\n\r\n            if (!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\r\n                const errorMsg: string = \"L'url n'est pas valide.\";\r\n                const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false};\r\n                newForm = { ...form, ...{ picture: newField} };\r\n            } else {\r\n                const newField: Field = { value: form.picture.value, error: '', isValid: true };\r\n                newForm = { ...form, ...{ picture: newField } };\r\n            }\r\n        }\r\n\r\n        // Validator name\r\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n            const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n            const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        }\r\n\r\n        // Validator hp\r\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n            const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n            const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        }\r\n\r\n        // Validator cp\r\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n            const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n            const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n    }\r\n\r\n\r\n\r\n    const isTypesValid = (type: string): boolean => {\r\n\r\n        if (form.types.value.length === 1 && hasType(type)) {\r\n            return false;\r\n        }\r\n\r\n      if (form.types.value.length >= 3 && !hasType(type)) {\r\n            return false;\r\n        }\r\n\r\n       return true;\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n\r\n        if (isFormValid) {\r\n            pokemon.picture = form.picture.value;\r\n            pokemon.name = form.name.value;\r\n            pokemon.hp = form.hp.value;\r\n            pokemon.cp = form.cp.value;\r\n            pokemon.types = form.types.value;\r\n\r\n            isEditForm ? updatePokemon() : addPokemon();\r\n        }\r\n    }\r\n\r\n    const addPokemon = () => {\r\n        PokemonService.addPokemon(pokemon).then(() => history.push(`/pokemons`));\r\n    }\r\n\r\n    const updatePokemon = () => {\r\n        PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\r\n    }\r\n\r\n    const deletePokemon = () => {\r\n        PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={e => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        {isEditForm && (\r\n                            <div className=\"card-image\">\r\n                                <img src={pokemon.picture} alt={pokemon.name}\r\n                                     style={{width: '250px', margin: '0 auto'}}/>\r\n                                <span className=\"btn-floating halfway-fab waves-effect waves-light\">\r\n                                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\r\n                            </span>\r\n                            </div>\r\n                        )}\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Pokemon picture */}\r\n                                {isAddForm() && (\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"picture\">Image</label>\r\n                                        <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\"\r\n                                               value={form.picture.value} onChange={e => handleIntputChange(e)}/>\r\n                                        {/* Picture error */}\r\n                                        {form.picture.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.picture.error}\r\n                                        </div>\r\n                                        }\r\n                                    </div>\r\n                                )}\r\n                                {/* Pokemon name */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Nom</label>\r\n                                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\"\r\n                                           value={form.name.value} onChange={e => handleIntputChange(e)}/>\r\n                                    {form.name.error &&\r\n                                    <div className=\"card-panel red accent-1\">\r\n                                        {form.name.error}\r\n                                    </div>\r\n                                    }\r\n                                </div>\r\n\r\n                                {/* Pokemon hp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"hp\">Point de vie</label>\r\n                                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\"\r\n                                           value={form.hp.value}\r\n                                           onChange={e => handleIntputChange(e)}/>\r\n                                    {form.hp.error &&\r\n                                    <div className=\"card-panel red accent-1\">\r\n                                        {form.hp.error}\r\n                                    </div>\r\n                                    }\r\n                                </div>\r\n\r\n                                {/* Pokemon cp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"cp\">Dégâts</label>\r\n                                    <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\"\r\n                                           value={form.cp.value}\r\n                                           onChange={e => handleIntputChange(e)}/>\r\n                                    {form.cp.error &&\r\n                                    <div className=\"card-panel red accent-1\">\r\n                                        {form.cp.error}\r\n                                    </div>\r\n                                    }\r\n                                </div>\r\n\r\n                                {/* Pokemon types */}\r\n                                <div className=\"form-group\">\r\n                                    <label>Types</label>\r\n                                    {types.map(type => (\r\n                                        <div key={type} style={{marginBottom: '10px'}}>\r\n                                            <label>\r\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\" value={type}\r\n                                                       checked={hasType(type)} disabled={!isTypesValid(type)}\r\n                                                       onChange={e => selectType(type, e)}/>\r\n                                                <span>\r\n                          <p className={formatType(type)}>{type}</p>\r\n                        </span>\r\n                                            </label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from \"../services/pokemon-service\";\r\nimport Loader from \"../components/loader\";\r\n\r\ntype Params = { id: string };\r\n\r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n\r\n    const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n\r\n    useEffect(() => {\r\n        PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n    }, [match.params.id]);\r\n\r\n    return (\r\n        <div>\r\n            { pokemon ? (\r\n                <div className=\"row\">\r\n                    <h2 className=\"header center\">Éditer { pokemon.name }</h2>\r\n                    <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n                </div>\r\n            ) : (\r\n                <h4 className=\"center\"><Loader/></h4>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonEdit;","export default class Pokemon {\r\n    // 1. Typage des propiétés d'un pokémon.\r\n    id: number;\r\n    hp: number;\r\n    cp: number;\r\n    name: string;\r\n    picture: string;\r\n    types: Array<string>;\r\n    created: Date;\r\n\r\n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n    constructor(\r\n        id: number,\r\n        hp: number = 100,\r\n        cp: number = 10,\r\n        name: string = '...',\r\n        picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n        types: Array<string> = ['Normal'],\r\n        created: Date = new Date()\r\n    ) {\r\n        // 3. Initialisation des propiétés d'un pokémons.\r\n        this.id = id;\r\n        this.hp = hp;\r\n        this.cp = cp;\r\n        this.name = name;\r\n        this.picture = picture;\r\n        this.types = types;\r\n        this.created = created;\r\n    }\r\n\r\n}","import React, {FunctionComponent, useState} from 'react';\r\nimport PokemonForm from \"../components/pokemon-form\";\r\nimport Pokemon from \"../models/pokemon\";\r\n\r\n\r\nconst PokemonAdd: FunctionComponent = () => {\r\n\r\n    const [id] = useState<number>(new Date().getTime());\r\n    const [pokemon] = useState<Pokemon>(new Pokemon(id));\r\n\r\n    return (\r\n\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Ajouter un pokémon</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonAdd;","export default class AutenticationService {\r\n    static isAuthenticated: boolean = false;\r\n\r\n    static login(username: string, password: string): Promise<boolean> {\r\n        const isAuthenticated = (username === 'pikachu' && password === 'pikachu');\r\n\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                this.isAuthenticated = isAuthenticated;\r\n                resolve(isAuthenticated);\r\n            }, 1000);\r\n        });\r\n    }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-service';\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n    username: Field,\r\n    password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        username: { value: '' },\r\n        password: { value: '' },\r\n    });\r\n\r\n    const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n        setForm({ ...form, ...newField});\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator username\r\n        if(form.username.value.length < 3) {\r\n            const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n            const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        }\r\n\r\n        // Validator password\r\n        if(form.password.value.length < 6) {\r\n            const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n            const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n\r\n        return newForm.username.isValid && newForm.password.isValid;\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n        if(isFormValid) {\r\n            setMessage('👉 Tentative de connexion en cours ...');\r\n            AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n                if(!isAuthenticated) {\r\n                    setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n                    return;\r\n                }\r\n\r\n                history.push('/pokemons');\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(e) => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Form message */}\r\n                                {message && <div className=\"form-group\">\r\n                                    <div className=\"card-panel grey lighten-5\">\r\n                                        {message}\r\n                                    </div>\r\n                                </div>}\r\n                                {/* Field username */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"username\">Identifiant</label>\r\n                                    <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.username.error &&\r\n                                    <div className=\"card-panel red accent-1\">\r\n                                        {form.username.error}\r\n                                    </div>}\r\n                                </div>\r\n                                {/* Field password */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\">Mot de passe</label>\r\n                                    <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.password.error &&\r\n                                    <div className=\"card-panel red accent-1\">\r\n                                        {form.password.error}\r\n                                    </div>}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Login;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n    <Route {...rest} render={(props) => {\r\n        const isAuthenticated = AuthenticationService.isAuthenticated;\r\n        if (!isAuthenticated) {\r\n            return <Redirect to={{ pathname: '/login' }} />\r\n        }\r\n\r\n        return <Component {...props} />\r\n    }} />\r\n);\r\n\r\nexport default PrivateRoute;","import React, { FunctionComponent } from 'react';\r\nimport PokemonList from \"./pages/pokemon-list\";\r\nimport PokemonDetail from './pages/pokemon-detail';\r\nimport { BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport PageNotFound from \"./pages/page-not-found\";\r\nimport PokemonEdit from \"./pages/pokemon-edit\";\r\nimport PokemonAdd from \"./pages/pokemon-add\";\r\nimport Login from \"./pages/login\"\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nconst App: FunctionComponent = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                {/* La barre de navigation commun à toutes les pages*/}\r\n                <nav>\r\n                    <div className=\"nav-wrapper teal\">\r\n                        <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\r\n                    </div>\r\n                </nav>\r\n                {/* Le système de gestion des routes de notre application */}\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" component={PokemonList} />\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    <PrivateRoute exact path=\"/pokemons\" component={PokemonList} />\r\n                    <PrivateRoute exact path=\"/pokemon/add\" component={PokemonAdd} />\r\n                    <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\r\n                    <PrivateRoute path=\"/pokemons/:id\" component={PokemonDetail} />\r\n                    <Route component={PageNotFound} />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n        document.getElementById('root')\r\n);"],"sourceRoot":""}